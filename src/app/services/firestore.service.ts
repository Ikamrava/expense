import { inject, Injectable } from '@angular/core';
import {
  Firestore,
  collection,
  addDoc,
  collectionData,
  doc,
  updateDoc,
  deleteDoc,
  query,
  orderBy,
  where,
  getDocs,
} from '@angular/fire/firestore';
import { Observable } from 'rxjs';

// Define an interface for your data object for type safety
export interface Item {
  id?: string; // Optional because it's generated by Firestore
  amount: number;
  date: string | null;
  dateObj?: any;
  description?: string;
}

export interface Category {
  id?: string;
  name: string;
}

@Injectable({
  providedIn: 'root',
})
export class FirestoreService {
  private firestore = inject(Firestore);
  private itemsCollection = collection(this.firestore, 'items');
  private categoryCollection = collection(this.firestore, 'category');

  // CREATE: Add a new item to the collection
  addItem(item: Item) {
    return addDoc(this.itemsCollection, item);
  }

  // READ: Get all items from the collection
  getItems(): Observable<Item[]> {
    const q = query(this.itemsCollection, orderBy('dateObj', 'desc'));
    return collectionData(q, {
      idField: 'id',
    }) as Observable<Item[]>;
  }

  // UPDATE: Update an existing item in the collection
  updateItem(item: Item) {
    const itemDocRef = doc(this.firestore, `items/${item.id}`);
    return updateDoc(itemDocRef, {
      amount: item.amount,
      date: item.date,
      description: item.description,
    });
  }

  // DELETE: Delete an item from the collection
  deleteItem(itemId: string) {
    const itemDocRef = doc(this.firestore, `items/${itemId}`);
    return deleteDoc(itemDocRef);
  }

  getCategories(): Observable<Category[]> {
    return collectionData(this.categoryCollection, {
      idField: 'id',
    }) as Observable<Category[]>;
  }

  async addCategoryIfNotExists(name: string): Promise<void> {
    const q = query(this.categoryCollection, where('name', '==', name));
    const result = await getDocs(q);

    if (result.empty) {
      await addDoc(this.categoryCollection, { name });
    }
  }
}
